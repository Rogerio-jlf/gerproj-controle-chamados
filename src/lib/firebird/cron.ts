import cron, { ScheduledTask } from 'node-cron';
import { atualizarCacheRecursos, getCacheStatus } from './recursos-cache';

// Vari√°vel para controlar se o cron est√° ativo
let cronAtivo = false;
let cronTask: ScheduledTask | null = null;

// üîí PROTE√á√ÉO GLOBAL contra m√∫ltiplas inst√¢ncias
let instanciaUnica: string | null = null;

function gerarIdInstancia(): string {
  return `cron-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}

export function iniciarCronRecursos() {
  // üîí Verificar se j√° existe uma inst√¢ncia ativa
  if (cronAtivo) {
    console.log('‚è∞ Cron job j√° est√° ativo');
    return;
  }

  // üîí Gerar ID √∫nico para esta inst√¢ncia
  const meuId = gerarIdInstancia();
  instanciaUnica = meuId;

  console.log(`‚è∞ Iniciando cron job para recursos... (ID: ${meuId})`);

  // üîí Verificar se ainda somos a inst√¢ncia ativa antes de executar
  setTimeout(() => {
    if (instanciaUnica !== meuId) {
      console.log(`‚ùå Inst√¢ncia ${meuId} cancelada - outra inst√¢ncia assumiu`);
      return;
    }

    // Executar imediatamente ao iniciar
    console.log(`üîÑ Executando primeira atualiza√ß√£o... (ID: ${meuId})`);
    atualizarCacheRecursos()
      .then(sucesso => {
        if (instanciaUnica !== meuId) return; // Verificar novamente
        console.log(
          sucesso
            ? '‚úÖ Primeira atualiza√ß√£o conclu√≠da'
            : '‚ùå Falha na primeira atualiza√ß√£o'
        );

        // DEBUG: Verificar se o cache foi realmente criado
        const status = getCacheStatus();
        console.log('üîç Status ap√≥s primeira atualiza√ß√£o:', {
          cacheExiste: !!status.cache,
          contador: status.contadorAtualizacoes,
          instancia: meuId,
        });
      })
      .catch(error => {
        if (instanciaUnica !== meuId) return;
        console.error('‚ùå Erro na primeira atualiza√ß√£o:', error);
      });
  }, 1000); // Delay para evitar conflitos de inicializa√ß√£o

  // Agendar execu√ß√£o a cada 5 minutos
  cronTask = cron.schedule(
    '*/5 * * * *',
    async () => {
      // üîí Verificar se ainda somos a inst√¢ncia ativa
      if (instanciaUnica !== meuId) {
        console.log(
          `‚ùå Execu√ß√£o cancelada - inst√¢ncia ${meuId} n√£o √© mais ativa`
        );
        return;
      }

      const agora = new Date().toISOString();
      console.log(
        `‚è∞ [${agora}] Executando atualiza√ß√£o autom√°tica... (ID: ${meuId})`
      );

      try {
        const sucesso = await atualizarCacheRecursos();

        // üîí Verificar novamente ap√≥s a execu√ß√£o
        if (instanciaUnica !== meuId) return;

        console.log(
          sucesso
            ? '‚úÖ Atualiza√ß√£o autom√°tica conclu√≠da'
            : '‚ùå Falha na atualiza√ß√£o autom√°tica'
        );

        // DEBUG: Verificar status ap√≥s cada atualiza√ß√£o
        const status = getCacheStatus();
        console.log('üîç Status ap√≥s atualiza√ß√£o autom√°tica:', {
          cacheExiste: !!status.cache,
          contador: status.contadorAtualizacoes,
          instancia: meuId,
        });
      } catch (error) {
        if (instanciaUnica !== meuId) return;
        console.error('‚ùå Erro no cron job de recursos:', error);
      }
    },
    {
      // üîí Configura√ß√µes adicionais para evitar sobreposi√ß√£o
      timezone: 'America/Sao_Paulo',
    }
  );

  cronAtivo = true;
  console.log(
    `‚úÖ Cron job iniciado - atualiza√ß√£o a cada 5 minutos (ID: ${meuId})`
  );
  console.log(`üìä Ambiente: ${process.env.NODE_ENV || 'development'}`);
}

// Fun√ß√£o para parar o cron
export function pararCronRecursos() {
  if (cronTask) {
    cronTask.stop();
    cronTask = null;
  }
  cronAtivo = false;
  instanciaUnica = null; // üîí Limpar inst√¢ncia
  console.log('‚èπÔ∏è Cron job parado');
}

// Fun√ß√£o para verificar status do cron
export function getStatusCron() {
  return {
    ativo: cronAtivo,
    ambiente: process.env.NODE_ENV || 'development',
    proximaExecucao: cronTask ? 'A cada 5 minutos' : null,
    taskExiste: !!cronTask,
    instanciaId: instanciaUnica,
  };
}

// üîí VERIFICAR SE J√Å FOI INICIALIZADO (prevenir hot reload)
if (typeof global !== 'undefined') {
  if (!(global as any).__cronRecursosInicializado) {
    console.log('üöÄ Iniciando cron job de recursos automaticamente...');
    iniciarCronRecursos();
    (global as any).__cronRecursosInicializado = true;
  } else {
    console.log(
      '‚ö†Ô∏è Cron j√° foi inicializado anteriormente (hot reload detectado)'
    );
  }
} else {
  // Fallback para ambientes sem global
  console.log('üöÄ Iniciando cron job de recursos automaticamente...');
  iniciarCronRecursos();
}

// üö´ REMOVER ATUALIZA√á√ÉO FOR√áADA - estava causando execu√ß√µes duplas
// setTimeout com atualizarCacheRecursos foi removido
