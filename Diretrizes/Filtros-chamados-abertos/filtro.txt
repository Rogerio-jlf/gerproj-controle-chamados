'use client';

import { useAuth } from '@/context/AuthContext';
import { useFilters } from '@/context/FiltersContext';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import {
  BarChart3,
  Calendar,
  CalendarDays,
  Filter,
  Loader2,
  Settings,
  User,
} from 'lucide-react';
import { useEffect, useState } from 'react';
import { useDebounce } from 'use-debounce';

import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';

interface FiltersProps {
  onFiltersChange: (filters: {
    ano: number;
    mes: number;
    cliente: string;
    recurso: string;
    status: string;
  }) => void;
}

// Fetchers
const fetchClientes = async ({ ano, mes, isAdmin, codCliente }: any) => {
  const params = new URLSearchParams({
    ano: ano.toString(),
    mes: mes.toString(),
    isAdmin: isAdmin.toString(),
  });
  if (!isAdmin && codCliente) params.append('codCliente', codCliente);
  const { data } = await axios.get(`/api/filtro/cliente?${params}`);
  if (!Array.isArray(data)) throw new Error('Resposta inesperada');
  return data;
};

const fetchRecursos = async ({
  ano,
  mes,
  isAdmin,
  codCliente,
  clienteSelecionado,
}: any) => {
  const params = new URLSearchParams({
    ano: ano.toString(),
    mes: mes.toString(),
    isAdmin: isAdmin.toString(),
  });
  if (!isAdmin && codCliente) params.append('codCliente', codCliente);
  if (isAdmin && clienteSelecionado)
    params.append('cliente', clienteSelecionado);
  const { data } = await axios.get(`/api/filtro/recurso?${params}`);
  if (!Array.isArray(data)) throw new Error('Resposta inesperada');
  return data;
};

const fetchStatus = async ({
  ano,
  mes,
  isAdmin,
  codCliente,
  clienteSelecionado,
  recursoSelecionado,
}: any) => {
  const params = new URLSearchParams({
    ano: ano.toString(),
    mes: mes.toString(),
    isAdmin: isAdmin.toString(),
  });
  if (!isAdmin && codCliente) params.append('codCliente', codCliente);
  if (isAdmin && clienteSelecionado)
    params.append('cliente', clienteSelecionado);
  if (recursoSelecionado) params.append('recurso', recursoSelecionado);
  const { data } = await axios.get(`/api/filtro/status?${params}`);
  if (!Array.isArray(data)) throw new Error('Resposta inesperada');
  return data;
};

export default function Filtros({ onFiltersChange }: FiltersProps) {
  const hoje = new Date();
  const { filters, setFilters } = useFilters();
  const { isAdmin, codCliente } = useAuth();

  const [ano, setAno] = useState(filters.ano || hoje.getFullYear());
  const [mes, setMes] = useState(filters.mes || hoje.getMonth() + 1);
  const [clienteSelecionado, setClienteSelecionado] = useState(
    filters.cliente || '',
  );
  const [recursoSelecionado, setRecursoSelecionado] = useState(
    filters.recurso || '',
  );
  const [statusSelecionado, setStatusSelecionado] = useState(
    filters.status || '',
  );

  const [debouncedAno] = useDebounce(ano, 300);
  const [debouncedMes] = useDebounce(mes, 300);
  const [debouncedClienteSelecionado] = useDebounce(clienteSelecionado, 300);
  const [debouncedRecursoSelecionado] = useDebounce(recursoSelecionado, 300);
  const [debouncedStatusSelecionado] = useDebounce(statusSelecionado, 300);

  // CLIENTES
  const { data: clientes = [], isLoading: loadingClientes } = useQuery({
    queryKey: ['clientes', ano, mes, isAdmin, codCliente],
    queryFn: () => fetchClientes({ ano, mes, isAdmin, codCliente }),
    enabled: !!ano && !!mes,
  });

  useEffect(() => {
    setClienteSelecionado('');
    setRecursoSelecionado('');
    setStatusSelecionado('');
  }, [clientes]);

  // RECURSOS
  const { data: recursos = [], isLoading: loadingRecursos } = useQuery({
    queryKey: ['recursos', ano, mes, isAdmin, codCliente, clienteSelecionado],
    queryFn: () =>
      fetchRecursos({ ano, mes, isAdmin, codCliente, clienteSelecionado }),
    enabled: !!ano && !!mes && (!!isAdmin || !!codCliente),
  });

  useEffect(() => {
    setRecursoSelecionado('');
    setStatusSelecionado('');
  }, [recursos]);

  // STATUS
  const { data: statusList = [], isLoading: loadingStatus } = useQuery({
    queryKey: [
      'status',
      ano,
      mes,
      isAdmin,
      codCliente,
      clienteSelecionado,
      recursoSelecionado,
    ],
    queryFn: () =>
      fetchStatus({
        ano,
        mes,
        isAdmin,
        codCliente,
        clienteSelecionado,
        recursoSelecionado,
      }),
    enabled: !!ano && !!mes && (!!isAdmin || !!codCliente),
  });

  useEffect(() => {
    setStatusSelecionado('');
  }, [statusList]);

  // Atualiza contexto e callback externo
  useEffect(() => {
    setFilters({
      ano: debouncedAno,
      mes: debouncedMes,
      cliente: debouncedClienteSelecionado,
      recurso: debouncedRecursoSelecionado,
      status: debouncedStatusSelecionado,
    });
    onFiltersChange({
      ano: debouncedAno,
      mes: debouncedMes,
      cliente: debouncedClienteSelecionado,
      recurso: debouncedRecursoSelecionado,
      status: debouncedStatusSelecionado,
    });
  }, [
    debouncedAno,
    debouncedMes,
    debouncedClienteSelecionado,
    debouncedRecursoSelecionado,
    debouncedStatusSelecionado,
    onFiltersChange,
    setFilters,
  ]);

  const isLoading = loadingClientes || loadingRecursos || loadingStatus;

  // -----------------------------------------------------------------------------

  // Lista fixa de anos disponíveis para filtro
  const years = [2024, 2025];

  // Lista fixa de meses disponíveis para filtro
  const months = [
    'Janeiro',
    'Fevereiro',
    'Março',
    'Abril',
    'Maio',
    'Junho',
    'Julho',
    'Agosto',
    'Setembro',
    'Outubro',
    'Novembro',
    'Dezembro',
  ];

  // Renderização do componente de filtros (mobile e desktop)
  return (
    // Container geral
    <>
      <div className="mb-4">
        {/* Filtros para desktop */}
        <div className="hidden lg:block">
          <div className="relative z-10">
            <div className="grid grid-cols-[70px_1fr_1fr_1fr_1fr_1fr] items-end gap-2">
              {/* Ícone de filtro fixo */}
              <div className="flex h-[64px] w-[64px] items-center justify-center rounded-lg bg-gradient-to-br from-blue-700 via-purple-700 to-blue-700 shadow-md shadow-black">
                <Filter className="h-8 w-8 text-white" />
              </div>
              {/* -------------------- */}

              {/* Ano TELA GRANDE */}
              <div className="group w-full">
                <label className="text-base mb-2 flex items-center space-x-2 font-bold text-black">
                  <Calendar className="h-5 w-5" />
                  <span>Ano</span>
                </label>

                <Select
                  value={ano.toString()}
                  onValueChange={(value) => setAno(Number(value))}
                >
                  <SelectTrigger className="text-base w-full cursor-pointer rounded-lg border bg-white p-2 font-semibold text-black shadow-md shadow-black hover:shadow-lg hover:shadow-black transition-all duration-200 hover:border-purple-500 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 focus:outline-none active:scale-90">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {years.map((yearOption) => (
                      <SelectItem
                        key={yearOption}
                        value={yearOption.toString()}
                      >
                        {yearOption}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              {/* -------------------- */}

              {/* Mês TELA GRANDE */}
              <div className="group w-full">
                <label className="text-base mb-2 flex items-center space-x-2 font-bold text-black">
                  <CalendarDays className="h-5 w-5" />
                  <span>Mês</span>
                </label>

                <Select
                  value={mes.toString()}
                  onValueChange={(value) => setMes(Number(value))}
                >
                  <SelectTrigger className="text-base w-full cursor-pointer rounded-lg border bg-white p-2 font-semibold text-black shadow-md shadow-black hover:shadow-lg hover:shadow-black transition-all duration-200 hover:border-purple-500 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 focus:outline-none active:scale-90">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {months.map((monthName, i) => (
                      <SelectItem key={i} value={(i + 1).toString()}>
                        {monthName}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              {/* -------------------- */}

              {/* CLIENTE TELA GRANDE */}
              <div className="group w-full">
                <label className="text-base mb-2 flex items-center space-x-2 font-bold text-black">
                  <User className="h-5 w-5" />
                  <span>Cliente</span>
                </label>

                <Select
                  value={clienteSelecionado}
                  onValueChange={(value) => setClienteSelecionado(value)}
                  disabled={!clientes.length || !!codCliente}
                >
                  <SelectTrigger className="text-base w-full cursor-pointer rounded-lg border bg-white p-2 font-semibold text-black shadow-md shadow-black hover:shadow-lg hover:shadow-black transition-all duration-200 hover:border-purple-500 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 focus:outline-none active:scale-90">
                    <SelectValue
                      placeholder={
                        loadingClientes ? (
                          <div className="flex items-center gap-2">
                            <Loader2 className="h-4 w-4 animate-spin" />
                            <span>Carregando...</span>
                          </div>
                        ) : (
                          'Todos clientes'
                        )
                      }
                    />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="">Todos clientes</SelectItem>
                    {clientes.map((nomeCliente) => (
                      <SelectItem key={nomeCliente} value={nomeCliente}>
                        {nomeCliente}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              {/* -------------------- */}

              {/* RECURSO TELA GRANDE */}
              <div className="group w-full">
                <label className="text-base mb-2 flex items-center space-x-2 font-bold text-black">
                  <Settings className="h-5 w-5" />
                  <span>Recurso</span>
                </label>

                <Select
                  value={recursoSelecionado}
                  onValueChange={(value) => setRecursoSelecionado(value)}
                  disabled={!recursos.length || isLoading}
                >
                  <SelectTrigger className="text-base w-full cursor-pointer rounded-lg border bg-white p-2 font-semibold text-black shadow-md shadow-black hover:shadow-lg hover:shadow-black transition-all duration-200 hover:border-purple-500 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 focus:outline-none active:scale-90">
                    <SelectValue
                      placeholder={
                        loadingRecursos ? (
                          <div className="flex items-center gap-2">
                            <Loader2 className="h-4 w-4 animate-spin" />
                            <span>Carregando...</span>
                          </div>
                        ) : (
                          'Todos recursos'
                        )
                      }
                    />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="">Todos recursos</SelectItem>
                    {recursos.map((r) => (
                      <SelectItem key={r} value={r}>
                        {r}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              {/* -------------------- */}

              {/* STATUS TELA GRANDE*/}
              <div className="group w-full">
                <label className="text-base mb-2 flex items-center space-x-2 font-bold text-black">
                  <BarChart3 className="h-5 w-5" />
                  <span>Status</span>
                </label>

                <Select
                  value={statusSelecionado}
                  onValueChange={(value) => setStatusSelecionado(value)}
                  disabled={!statusList.length || isLoading}
                >
                  <SelectTrigger className="text-base w-full cursor-pointer rounded-lg border bg-white p-2 font-semibold text-black shadow-md shadow-black hover:shadow-lg hover:shadow-black transition-all duration-200 hover:border-purple-500 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 focus:outline-none active:scale-90">
                    <SelectValue
                      placeholder={
                        loadingStatus ? (
                          <div className="flex items-center gap-2">
                            <Loader2 className="h-4 w-4 animate-spin" />
                            <span>Carregando...</span>
                          </div>
                        ) : (
                          'Todos status'
                        )
                      }
                    />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="">Todos status</SelectItem>
                    {statusList.map((s) => (
                      <SelectItem key={s} value={s}>
                        {s}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              {/* -------------------- */}
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
